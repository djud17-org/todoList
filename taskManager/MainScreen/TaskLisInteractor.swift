//
//  TaskLisInteractor.swift
//  taskManager
//
//  Created by Давид Тоноян  on 22.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TaskListBusinessLogic {
	
	/// Функция сообщает о готовности представления к отображению данных
	func viewIsReady()
	
	/// Функция сообщает о выборе задачи
	/// - Parameter indexPath: Индекс задачи
	func didTaskSelected(at indexPath: IndexPath)
}

enum DataModel {
	struct InteractorData {
		let sections: [Section]
		let data: [Section: [Task]]
	}
}

final class TaskListInteractor: TaskListBusinessLogic {
	private let sectionManager: ISectionForTaskManagerAdapter
	var presenter: ITaskPresenter?

	init(sectionManager: ISectionForTaskManagerAdapter) {
		self.sectionManager = sectionManager
	}

	// MARK: Do something

	func viewIsReady() {
		let datamodel = createDataModel()
		presenter?.displayData(data: datamodel)
	}

	func didTaskSelected(at indexPath: IndexPath) {
		let sections = sectionManager.getSections()
		let sectionTasks = sectionManager.getTasksForSection(section: sections[indexPath.section])
		let task = sectionTasks[indexPath.row]

		task.taskStatus = task.taskStatus == .completed ? .planned : .completed

		let datamodel = createDataModel()
		presenter?.displayData(data: datamodel)
	}

	private func createDataModel() -> DataModel.InteractorData {
		let data = configureData()
		let datamodel = DataModel.InteractorData(
			sections: sectionManager.getSections(),
			data: data
		)

		return datamodel
	}

	private func configureData() -> [Section: [Task]] {
		var data: [Section: [Task]] = [:]
		for section in sectionManager.getSections() {
			data[section] = sectionManager.getTasksForSection(section: section)
		}

		return data
	}
}
